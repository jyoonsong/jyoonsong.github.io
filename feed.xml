<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://blog.jaeyoon.io/feed.xml" rel="self" type="application/atom+xml"/><link href="http://blog.jaeyoon.io/" rel="alternate" type="text/html" hreflang="ko_KR"/><updated>2020-07-28T04:11:34+00:00</updated><id>http://blog.jaeyoon.io/</id><title type="html">재윤 블로그</title><subtitle>HCI 학도가 생각과 경험을 기록하고 정리하는 공간입니다.</subtitle><author><name>Jaeyoon Song</name></author><entry><title type="html">뒤늦은 2020년 계획</title><link href="http://blog.jaeyoon.io/2020/05/plan.html" rel="alternate" type="text/html" title="뒤늦은 2020년 계획"/><published>2020-05-04T19:11:20+00:00</published><updated>2020-05-04T19:11:20+00:00</updated><id>http://blog.jaeyoon.io/2020/05/plan</id><content type="html" xml:base="http://blog.jaeyoon.io/2020/05/plan.html">&lt;figure&gt;&lt;img data-action=&quot;zoom&quot; src=&quot;/assets/img/200502/concept.jpeg&quot; alt=&quot;컨셉충&quot; /&gt;&lt;figcaption&gt;강해지겠다는 컨셉&lt;/figcaption&gt;&lt;/figure&gt; &lt;p&gt;지난 몇달 간 일상이 무너질 정도로 힘든 일이 많았다. 아마 내가 너무 쉽게 무너진 것은 내 몸과 마음이 건강하지 못했기 때문이리라. 이에 2020년 올해에는 꼭 건강한 사람으로 변모하고자 다짐했고, 새로운 출발을 계획하려 한다. 내가 가장 먼저 해야 할 일은 다른 것을 욕심내기보다도 우선 일상으로 복귀하는 것이다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;변화도 일상이 있을 때 가능하다 - &lt;a href=&quot;http://blog.naver.com/dlxuxlb/221915134098&quot; target=&quot;_blank&quot;&gt;블로그 일상로망스&lt;/a&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;그렇다면 나의 일상은 어떠해야 하는가? 이 또한 새롭게 마주하니 어려운 질문이었다. 과거에 일상적으로 해왔던 것들 중 무엇을 버리고 무엇을 다시 지속해야 하며, 새롭게 시작할 만한 일에는 무엇이 있을지 글을 쓰며 생각을 정리해보았다.&lt;/p&gt; &lt;h3 id=&quot;꾸준히-지속해야-할-것들&quot;&gt;꾸준히 지속해야 할 것들&lt;/h3&gt; &lt;p&gt;[1] 연구 배우기&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;아이디어 로그&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;지난 해부터 작성해오던 연구 아이디어 로그를 다시 틈틈이 작성하고자 한다. 아이디어가 생각날 때마다 터무니없더라도 생각이 든 계기와 생각한 바를 자세히 적어두자.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;교수님과의 미팅 충실히 준비하기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;박사유학 기간 동안 나를 지도해주실 &lt;a href=&quot;https://cci.mit.edu/malone/&quot;&gt;Thomas Malone 교수님&lt;/a&gt;은 정말 열정적인 분이다. 매번 열정 가득한 메일을 보내셔서 무기력한 내가 부끄러워진다. 교수님께서 1년동안 박사생활 준비 차원에서 원격으로나마 매주 미팅을 하며 프로젝트에 참여할 것을 제안해주셨고, 이런 감사한 제안에 나도 그간의 게으름을 반성하고 내가 가진 능력을 총동원하여 프로젝트에 의미있는 기여를 하는 것이 목표이다. 매주 미팅을 충실히 준비하고, 생각나는 아이디어를 먼저 말씀드려 피드백을 받으며, 질문을 자주 하면서 많이 배우고자 한다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;페이퍼 많이 읽고 정리하기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;페이퍼를 꾸준히 읽고 기억할 만한 페이퍼는 글로 풀어 쓰려 한다. 말주변이 없어서인지 알고 있는 개념이라고 생각해도 막상 말로 설명하면 궤변이 되어버릴 때가 많다. 구어체로 설명하는 식의 글을 한 번씩 써서 페이퍼를 온전히 이해하고 분야에 대한 지식도 쌓아가는 기회가 되었으면 한다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;딥러닝 입문하기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;방학 때부터 coursera의 딥러닝 입문 수준의 강의를 듣을 계획이다. 이에 대해서는 아직 아는 것이 많지 않아 종강 후에 더 자세한 계획을 세워야 할 것 같다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;[2] 영어 공부하기&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;영어회화 스터디&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;미드 프렌즈를 보며 회화를 공부하는 스터디에 꾸준히 참여할 계획이다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;[3] 학업&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;학교 수업 공부&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;학업에 충실하기. 비대면강의가 좀더 오랜 기간 지속되더라도 미루지 말고 제때 듣기.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;[4] 운동하기&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;필라테스&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;작년 초에 시작한 필라테스를 계속 꾸준히 해야겠다. 체육시간에 늘 암묵적 깍두기 신세였던 예전을 생각하면 그래도 체력이 많이 발전했다. 그러나 진짜 건강하다고 말하기엔 너무 멀었다. 최소 주 3회는 반드시 가고 여력이 되면 방학에 좀더 동적인 운동도 추가적으로 할 생각이다.&lt;/p&gt; &lt;figure&gt;&lt;img data-action=&quot;zoom&quot; src=&quot;/assets/img/200502/exercise.gif&quot; alt=&quot;운동&quot; /&gt;&lt;figcaption&gt;이렇게라도 움직이자!&lt;/figcaption&gt;&lt;/figure&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;새롭게-시작하고자-하는-것들&quot;&gt;새롭게 시작하고자 하는 것들&lt;/h3&gt; &lt;p&gt;[1] 책읽기&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;트레바리 북클럽&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;사람은 책을 만들고, 책은 사람을 만든다. 아직은 조금이라도 강제성이 있어야 시간내어 읽을 것 같아 비싼 돈을 내고 북클럽에 가입했다. 대학에 입학하고 독서와 점차 멀어지면서 지금 당장은 순수하게 자발적으로 읽는 것이 쉽지 않겠다 싶었다. 어머니께서 ‘신과 함께’ 팟캐스트에서 트레바리 스타트업 창업자 이야기를 듣고 추천해주시기도 했고. 북클럽을 통해 평소 관심가지지 못했던 것들에 대해 읽으며 마음의 양식을 쌓아가려 한다.&lt;/p&gt; &lt;p&gt;가장 먼저 참여할 북클럽의 주제는 “나 알기”이다. 나조차 나를 잘 알지 못해 다른 사람의 인생을 살고 있다는 느낌을 줄곧 받는다. 거짓과 과장은 버리고, 나 자신에 대한 올바른 이해를 하고 있는 그대로의 나를 객관화하여 알아가기 위해 신청했다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;[2] 봉사활동&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;멘토링 봉사활동&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;나누면서 살자고 늘 말만 하고, 실천하는 삶을 살지는 못한 것 같다. 아마도 나 스스로를 약자라고 생각하는 피해의식이 있었기 때문일 테다. 나 자신에게 신경쓰느라 다른 이의 아픔에 눈을 돌리지 못했다. 이에 이번 달부터 멘토링 봉사활동을 시작해 출국할 때까지 매주 하고자 한다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;[3] 기록&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;틈틈이 글쓰기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;글을 쓰며 생각을 정리하는 게 건전하지 못한 생각의 고리를 끊어내는 데 큰 도움이 된다. 생각하기 전에 말부터 나가니 말실수를 자주 하게 된다. 생각을 정리하는 연습을 충분히 해놓아야 언행도 바를 수 있는 것 같다. 개인적인 내용이 아닌 것은 종종 블로그에도 올릴 계획이다. 글에 대한 피드백을 받을 수 있는 좋은 통로인 것 같기 때문이다. 따끔하든 따뜻하든 피드백이 있다면 댓글 환영합니다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;생각을 조심해라 말이 된다. &lt;br /&gt; 말을 조심해라 행동이 된다. &lt;br /&gt; 행동을 조심해라 습관이 된다.&lt;br /&gt; 습관을 조심해라 성격이 된다. &lt;br /&gt; 성격을 조심해라 운명이 된다. - 마거릿 대처&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;워낙 작심삼일인 나라서 쉽지 않겠지만 이렇게 정리한 이상 반드시 실천할 것이다. 나의 꿈과 사랑하는 사람들을 위해 도전하는 삶을 살아야지.&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="계획"/><summary type="html">강해지겠다는 컨셉 지난 몇</summary></entry><entry><title type="html">미움받을 용기</title><link href="http://blog.jaeyoon.io/2020/05/adler.html" rel="alternate" type="text/html" title="미움받을 용기"/><published>2020-05-03T19:11:20+00:00</published><updated>2020-05-03T19:11:20+00:00</updated><id>http://blog.jaeyoon.io/2020/05/adler</id><content type="html" xml:base="http://blog.jaeyoon.io/2020/05/adler.html">&lt;h3 id=&quot;읽게-된-계기&quot;&gt;읽게 된 계기&lt;/h3&gt; &lt;p&gt;이 책을 읽게 된 계기는 우선 어머니가 추천해준 책들 중 한 권이었기 때문이다. 하지만 그 책들 중 내가 이 책을 가장 열심히 읽게 된 데는 또다른 이유가 있다. 책장을 몇 장 넘기지도 않았는데 다음과 같은 반가운 문장을 마주친 것이다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;청년은 어린 시절부터 스스로에게 자신감이 없었다. (중략) 그래서일까? 남의 시선을 지나치게 의식하는 면이 있었다. 그리고 남의 행복을 진심으로 축복하지 못해 늘 자기혐오에 빠졌다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;청년에 대한 내용을 읽자마자 내 이야기인가 싶어 솔깃했다. 책을 읽는 내내 청년의 말투도 참 성가시지만 나와 비슷한 면이 많다고 느꼈다. 이렇게 청년의 상황에 나를 대입한 것이 이 책을 읽은 가장 큰 동기이다. 결과적으로 이 책은 나에게 아주 적절한 처방을 해주었고, 행복해질 용기를 내도록 도와준 고마운 책이므로 내용을 자세히 정리해보고자 한다.&lt;/p&gt; &lt;h3 id=&quot;트라우마를-부정하라&quot;&gt;트라우마를 부정하라&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;원인론&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;원인론의 본질은 다음의 명제로 설명할 수 있다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;과거의 사건(원인)이 현재의 나(결과)를 규정한다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;원인론은 원인이 결과를 지배하고, 인간은 감정에 저항할 수 없는 존재라는 허무주의적 관점을 펼친다. 자유의지를 부정하고 인간을 기계처럼 바라보는 것이다.&lt;/p&gt; &lt;p&gt;원인론의 한계는 분명하다. 과거의 원인에 주목해서 상황을 설명하려 든다면, 모든 이야기는 저절로 ‘결정론’에 도달하게 된다. 즉 &lt;strong&gt;우리의 현재, 그리고 미래는 전부 과거 사건에 의해 결정되고 움직일 수 없는 것&lt;/strong&gt;이라고 말이다. (33쪽)&lt;/p&gt; &lt;p&gt;하지만 과연 그럴까? 예컨대 책속의 청년은 친구가 방 안에서 꼼짝도 하지 않는 이유가 어린 시절 부모에게 학대를 받고 자랐기 때문이라고 생각한다. 그러나 청년의 논리에 따르면 부모에게 학대를 받고 자란 사람은 모두 청년의 친구와 같은 결과, 즉 집안에 틀어박혀 지내야 앞뒤가 맞다.&lt;/p&gt; &lt;p&gt;또다른 예시로 철학자는 감기로 심한 열이 난 환자가 의사에게 진찰을 받는 과정을 든다. 의사가 “환자 분이 감기에 걸린 것은 어제 옷을 얇게 입고 나갔기 때문입니다”하고 진단을 내렸을 때 만족할 환자는 없을 것이다. 문제는 지금 고열에 시달리고 있다는 증상이기 때문이다. 전문적인 의사라면 과거의 원인만 짚어내기보다 현재 환자의 증상을 해결하기 위해 약을 처방하거나 주사를 놓을 것이다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;목적론&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;위와 같은 이유로 이 책에 등장하는 철학자는 원인론과 대치되는 목적론을 옹호한다. 목적론은 어디까지나 “&lt;strong&gt;인간은 변할 수 있다&lt;/strong&gt;“를 전제로 한다. &lt;em&gt;왜 인간이 변할 수 있는가?&lt;/em&gt; 인간은 과거의 원인에 영향을 받아 행동하는 것이 아니라 스스로 정한 목적을 향해 움직이기 때문이다. 즉 목적론은 &lt;strong&gt;과거의 원인이 아닌 현재의 목적&lt;/strong&gt;을 본다.&lt;/p&gt; &lt;p&gt;목적론의 세상에서 인간은 끊임없이 자신의 &lt;strong&gt;생활양식(lifestyle)&lt;/strong&gt;을 선택하며 살아간다. 아들러에 따르면 생활양식이란 삶에 대한 사고나 행동의 경향을 가리킨다. 한 사람이 세계를 어떻게 바라보는가, 그리고 자신을 어떻게 바라보는가 하는 &lt;strong&gt;의미 부여 방식을 집약시킨 개념&lt;/strong&gt;이다. 성격 대신 생활양식이라는 용어를 사용하는 이유는 성격이란 말에는 변하지 않는다는 뉘앙스가 있지만, 생활양식이라면 변용시키는 것도 가능할 테기 때문이다. (59쪽) 다시 말해 생활양식은 선천적으로 주어진 것이 아니라 스스로 선택한 것이므로 다시 선택하는 것도 얼마든지 가능하다. 따라서 인간은 변할 수 있는 것이다.&lt;/p&gt; &lt;p&gt;목적론이 세상을 어떻게 설명하는지 다음 세 가지 경우를 통해 좀더 살펴보자.&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;트라우마란 존재하지 않는다.&lt;/p&gt; &lt;p&gt;위 원인론에서 언급한 사례를 다시 살펴보자. 청년이 ‘불안해서 밖으로 나오지 못한다’고 여긴 친구는 철학자에 따르면 사실 ‘밖으로 나오지 못하니까 불안한 감정을 지어내는 것’이다. 가령 그 친구가 ‘나는 부모에게 학대받아서 사회에 적응하지 못하는 것이다’라고 생각한다면, 그것은 그의 마음속에서 그렇게 생각하고 싶은 ‘목적’이 있기 때문이다. (38쪽) 왜 이런 목적을 가지게 되었을까? 아마도 밖에 나가지 않고 내내 방 안에 틀여박혀 있으면 부모가 걱정을 해주고 관심을 한 몸에 받을 수 있기 때문일 것이다.&lt;/p&gt; &lt;p&gt;이처럼 어떠한 경험도 그 자체는 성공의 원인도 실패의 원인도 아니다. 우리는 경험을 통해서 받은 충격(트라우마)로 고통받는 것이 아니라, 경험 안에서 목적에 맞는 수단을 찾아낸다. 즉 &lt;strong&gt;과거의 경험 그 자체에 의해 결정되는 것이 아니라, 경험에 부여한 의미에 따라 현재 자신의 삶을 결정&lt;/strong&gt;하는 것이다. (37쪽)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;인간은 분노를 지어낸다.&lt;/p&gt; &lt;p&gt;철학자는 분노를 언제든 넣었다 빼서 쓸 수 있는 ‘도구’라고 말한다. 전화가 오면 순식간에 집어넣었다가 전화를 끊으면 다시 꺼낼 수 있는. (43쪽) 예컨대 청년은 별 것 아닌 일로 웨이터에게 큰소리를 내는 실수를 저질렀다. &lt;strong&gt;이는 청년이 분노라는 감정에 지배받았기 때문이 아니라, 큰소리를 내고자 하는 목적이 먼저였기 때문이다. 그는 말로 차근차근 설명하는 것이 귀찮아서 저항하지도 않는 상대를 더 값싼 수단으로 굴복시키려 했다&lt;/strong&gt;. (42~43쪽) 만약 청년의 목적이 큰 소리를 내고자 하는 게 아니었다면, 그는 굳이 분노라는 감정을 동원할 필요가 없었을 것이다. 이처럼 목적론에 따르면 인간은 감정에 지배받지 않고, 감정은 수단에 불과하다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;나의 불행은 스스로 선택한 것&lt;/p&gt; &lt;p&gt;&lt;strong&gt;지금 내가 불행한 것은 내 손으로 ‘불행한 상태’를 선택했기 때문이다. 불행의 별 아래에서 태어났기 때문이 아니라.&lt;/strong&gt; (55쪽) 내가 다른 누군가가 되고 싶어 하며 불행해 하는 까닭은 무엇이 주어졌느냐에만 주목하기 때문이다. 하지만 중요한 것은 주어진 것을 어떻게 활용하느냐이다. 물론 이러한 선택이 늘 의식적인 것은 아니다. 게다가 선택에는 외적 요인, 즉 인종과 국적, 문화, 가정환경 등이 크게 영향을 미친다. 그럼에도 불행한 상태를 선택한 장본인이 나 자신임은 변치 않는다.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;위 세 가지 경우 모두 인간은 변할 수 있다는 전제와 상통한다. 과거의 경험이나 감정, 주어진 것에 의해 지배받는 것이 아니라 그것들에 부여한 의미 즉 스스로 선택한 생활양식에 따라 어떤 삶을 살지가 결정된다. 변화의 선택권은 언제나 스스로에게 있는 것이다.&lt;/p&gt; &lt;p&gt;그렇다면 &lt;em&gt;왜 사람들은 쉽게 변하지 않는가?&lt;/em&gt; 그들이 변하지 않는 것은, &lt;strong&gt;스스로 변하지 않겠다고 결심했기 때문&lt;/strong&gt;이다. &lt;em&gt;왜 변하지 않겠다고 결심하는가&lt;/em&gt;? 지금의 생활양식에 익숙해져서 이대로 변하지 않고 사는 것이 더 편하니까. ‘이대로의 나’로 살아간다면 눈앞에 닥친 일에 어떻게 대처해야 할지 여태까지의 경험을 통해 쉽게 추측할 수 있다. 반면 새로운 생활양식을 선택하면 새로운 자신에게 무슨 일이 일어날지도 모르고, 눈앞의 일에 어떻게 대처해야 할지도 모른다. 미래를 예측할 수 없어 불안한 삶을 살게 되는 것이다. 즉 인간은 더 힘들고, 더 불행한 삶이 기다리고 있을 지 모른다는 두려움에 생활양식을 쉽게 바꾸려 하지 않는다.&lt;/p&gt; &lt;p&gt;그렇다면 &lt;em&gt;어떻게 하면 생활양식을 바꿀 수 있는가?&lt;/em&gt; &lt;strong&gt;생활양식을 바꾸려고 할 때, 우리는 큰 용기가 있어야 한다&lt;/strong&gt;. 변함으로써 생기는 불안을 선택할 것이냐, 변하지 않아서 따르는 불만을 선택할 것이냐. 지금 당장 해야 할 일은 바로 지금의 생활양식을 버리겠다고 결심하는 것이다. 시도하지 않으면 단 한 발자국도 나아갈 수 없다. 세계와 자신에 대해 어떤 의미를 부여하느냐(생활양식)에 따라 세계와 관계를 맺는 법, 그리고 행동도 변할 수밖에 없으므로, 나는 ‘나’인 채로 그저 생활양식을 고르기만 하면 되는 것이다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;자네가 불행한 것은 과거의 환경 탓이 아니네. 그렇다고 능력이 부족해서도 아니고. 자네에게는 그저 용기가 부족한 것 뿐이야. 말하자면 행복해질 용기가 부족한 거지. (63쪽)&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;이러한 맥락에서 아들러의 심리학을 용기의 심리학이라고도 부른다.&lt;/p&gt; &lt;h3 id=&quot;모든-고민은-인간관계에서-비롯된다&quot;&gt;모든 고민은 인간관계에서 비롯된다&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;왜 자기 자신을 싫어하는가&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;자기 자신을 싫어하는 사람들은 남에게 부정당하는 것을 두려워한다. 누군가에게 무시당하고, 거절당하고, 마음에 깊은 상처를 입는 것을 무서워한다. 즉 그들의 ‘목적’은 ‘다른 사람과의 관계에서 상처받지 않는 것’이다.&lt;/p&gt; &lt;p&gt;그렇다면 어떻게 이 목적을 이룰 수 있을까? 답은 간단하다. 자신의 단점을 찾아내서 스스로를 미워하고 인간관계에 발을 들여놓지 않으면 된다. 그렇게 자신의 껍데기 안에 틀어박혀 있으면 누구와도 관계를 맺지 않아도 되고, 남에게 거절을 당했을 때도 이유를 댈 수 있다. 나는 이런 단점이 있어 거절당했다고, 이런 단점만 없으면 나도 사랑받을 수 있다고.&lt;/p&gt; &lt;p&gt;하지만 &lt;strong&gt;인간관계에서 상처받지 않는 것은 기본적으로 불가능하다&lt;/strong&gt;. 인간관계에 발을 들여놓으면 크든 작든 상처를 받게 되어 있고, 스스로도 의도했든 아니든 누군가에게 상처를 주게 된다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;아들러는 말했네. “고민을 없애려면 우주 공간에 그저 홀로 살아가는 수밖에 없다.” 하지만 그것은 불가능하지.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;이에 우리는 일단 ‘지금의 나’를 받아들이고, 결과가 어떻든지 간에 앞으로 나아갈 용기를 가져야 한다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;열등감은 주관적인 감정이다&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;열등감이란 자신에 대한 가치판단이다. 예컨대 “나는 못생겼어” 라는 열등감은 어디까지나 인간관계 속에서 타인과의 비교를 통해 만들어낸 주관적인 감정이다. 만약 비교해야 할 타인이 존재하지 않았다면 없었을 객관적인 ‘열등성’이 아닌 주관적인 ‘열등감’이다. 즉 내 키를 장점으로 볼지 단점으로 볼지는 모두 주관에 달린 문제라서 스스로의 선택에 달린 것이다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;우리는 객관적 사실을 움직이지는 못해. 하지만 주관적 해석은 얼마든지 움직일 수가 있지. 우리는 주관적인 세계에 살고 있네.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;아들러는 열등감이 누구에게나 있다고 인정했다. 열등감 자체는 사실 조금도 나쁜 것이 아니다. 인간은 무기력한 상태에서 벗어나 향상되기를 바라는 본능을 가지고 있기 때문이다. 따라서 우월성 추구도 열등감도 병이 아니라 건강하고 정상적인 노력과 성장을 하기 위한 자극이다. 즉 열등감도 제대로만 발현하면 노력과 성장의 촉진제가 되는 것이다. 인간은 내면에 자리한 열등감을 없애기 위해 더욱 전진하곤 한다.&lt;/p&gt; &lt;p&gt;하지만 문제는 열등감이 아니라 열등 콤플렉스이다. 현재 우리 사회에서는 ‘콤플렉스’라는 말이 열등감과 같은 말처럼 쓰이고 있다. 하지만 아들러에 따르면 콤플렉스는 ‘복잡하게 얽힌 도착적인 심리 상태’를 가리키는 용어로 열등감과는 무관하다. 그중에서도 열등 콤플렉스란 자신의 열등감을 변명거리로 삼기 시작한 상태를 말한다. 예컨대 “나는 못생겼기 때문에 결혼할 수가 없다”고 말하는 것은 열등 콤플렉스이다. 이는 원래는 어떤 인과관계도 없는 것을, 마치 중대한 인과관계가 있는 것처럼 스스로를 속이는 것이다. (인과관계가 없는 이유는 위에서 설명한 목적론적 관점에서 바라보면 알 수 있다.)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;열등 콤플렉스의 또다른 측면은 우월 콤플렉스와 동전의 앞뒷면처럼 밀접하게 연결되어 있다는 점이다&lt;/strong&gt;. “A라서 B를 할 수 없다”고 말하는 사람은 “A만 아니면 나는 유능하고 가치 있는 존재”임을 은연중에 암시하는 셈이다. 우월 콤플렉스란 마치 자신이 우월한 것처럼 행동하며 ‘거짓 우월성’에 빠지는 것을 가리킨다. 예컨대 우월 콤플렉스를 가진 사람은 자신이 권력자와 각별한 사이라는 것을 짐짓 어필함으로써 그를 통해 자신이 특별한 존재인 것처럼 행세한다.&lt;/p&gt; &lt;p&gt;하지만 &lt;strong&gt;정말로 자신 있는 사람은 자랑하지 않는다&lt;/strong&gt;. 열등감이 심하니까 자랑하는 것일 뿐. 자신이 우월하다는 것을 일부러 과시하려고 한다. 그렇게라도 하지 않으면 주위에 누구 한 사람 ‘이런 나’를 인정해주지 않을까봐 겁이 나니깐. 이것이 바로 완벽한 우월 콤플렉스이다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;인생은 타인과의 경쟁이 아니다.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;그렇다면 우리는 열등감을 어떻게 해야 할까? 아들러가 앞서 말한 인간의 본능인 “우월성 추구”란 남보다 더 높은 곳으로 가려는 경쟁 의사를 말하지 않는다. 그저 자신의 발을 한 발 앞으로 내딛으려는 의지를 가리킨다. 따라서 건전한 열등감이란 타인과 비교해서 생기는 것이 아니라 “이상적인 나”와 비교해서 생기는 것이다. 우리는 저마다 다른 성별, 연령, 지식, 경험, 외모를 가지고 있지만 &lt;strong&gt;그럼에도 불구하고 ‘같지는 않지만 대등한’ 존재이다&lt;/strong&gt;. 그 차이를 선악이나 우열과 엮어선 안된다. 어떤 차이가 있든 우리는 대등하니까.&lt;/p&gt; &lt;p&gt;모든 인간은 대등하며 같은 길을 걷는다. 앞서 걸으나 뒤에서 걸으나 관계없이 &lt;strong&gt;우리는 세로축이 존재하지 않는 평평한 공간을 걷고 있다&lt;/strong&gt;. 우리가 걷는 것은 누군가와 경쟁하기 위해서가 아니다. 지금의 나보다 앞서 나가려는 것이야말로 가치있다.&lt;/p&gt; &lt;h3 id=&quot;인생의-과제&quot;&gt;인생의 과제&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;행동의 목표&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;1) 자립할 것&lt;br /&gt;2) 사회와 조화를 이루며 살아갈 것&lt;/p&gt; &lt;p&gt;&lt;strong&gt;심리적 목표&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;1) “내게는 능력이 있다”는 의식을 가질 것&lt;br /&gt; 2) “사람들은 내 친구다”는 의식을 가질 것&lt;/p&gt; &lt;h3 id=&quot;마주친-글귀&quot;&gt;마주친 글귀&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;철학자: 아는지 모르겠지만 우물물의 온도는 1년 내내 18도를 유지한다네. 이것은 누가 측정하든지 간에 똑같은 객관적인 수치지. 하지만 여름에 마시는 우물물은 차갑게 느껴지고, 겨울에 마시는 우물물은 따뜻하게 느껴진다네. 온도계는 늘 18도를 유지하지만 여름과 겨울에 느끼는 정도가 다른 것이지.&lt;/p&gt; &lt;p&gt;청년: 요컨대 환경의 변화에 따라 착각하게 된다?&lt;/p&gt; &lt;p&gt;철학자: 아니, 착각이 아닐세. 그때 ‘자네’가 우물물이 차갑다거나 따뜻하다고 느낀 것은 움직일 수 없는 사실이네. 주관적인 세계에 살고 있다는 것은 바로 그런 거지. 우리는 ‘어떻게 보고 있는가’라는 주관에 지배받고 있고, 자신의 주관에서 벗어날 수 없다네. 지금 자네의 눈에는 세계가 복잡기괴한 혼돈처럼 비춰질 걸세. 하지만 &lt;strong&gt;자네가 변한다면 세계는 단순하게 바뀔 걸세. 문제는 세계가 어떠한가가 아니라, 자네가 어떠한가 라는 점이라네.&lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;세계가 어둡다고 한탄할 것이 아니라 선글라스를 벗으면 되네. 맨눈에 비치는 세계는 강렬하고 눈이 부셔서 절로 눈을 감게 될지도 모르네. 다시 선글라스를 찾게 될지도 모르네. &lt;strong&gt;그래도 선글라스를 벗을 수 있을까? 세계를 정면으로 바라볼 수 있을까? 자네에게 그런 ‘용기’가 있을까? 그게 관건이지&lt;/strong&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;그는 그래도 상관없다고 했네. 아들러파의 존재 자체가 잊혔다는 사실, 그것이야말로 그의 사상이 일개 학문에서 탈피하여 사람들의 상식(common sense)이 된다는 것을 의미하니까. (28쪽)&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;청년: 이 세계는 평등하지 않으며 지금도 인종이나 국적, 민족의 차이가 엄연히 존재합니다. 그러니 ‘무엇이 주어졌는가’에 주목하는 것은 당연해요. 선생님, 선생님의 말씀은 현실을 무시한 탁상공론에 불과하다고요!&lt;/p&gt; &lt;p&gt;철학자: 현실을 무시하는 것은 자네지. ‘&lt;strong&gt;무엇이 주어졌는가’에 집착한다고 해서 현실이 변하나&lt;/strong&gt;? 우리는 교환이 가능한 기계가 아닐세. 우리에게 필요한 것은 교환이 아니라 고쳐나가는 것이야.&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;철학자: 아니, 자네를 탓하는 게 아닐세. 오히려 아들러의 목적론은 “&lt;strong&gt;지금까지의 인생에 무슨 일이 있었든지 앞으로의 인생에는 아무런 영향도 없다&lt;/strong&gt;“라고 말해주는 거지. 인생을 결정하는 것은 ‘지금, 여기’를 사는 자네라고 말일세.&lt;/p&gt; &lt;p&gt;청년: 내 인생은 지금, 여기에서 결정된다?&lt;/p&gt; &lt;p&gt;철학자: 그래, 과거는 존재하지 않으니까.&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;분노란 커뮤니케이션의 한 형태일 뿐이며 화내지 않는 커뮤니케이션도 얼마든지 가능하다. 우리는 분노를 표출하지 않고도 의사소통을 할 수 있고 나를 받아들이게 할 수 있다. 경험을 통해 그것을 알게 되면 자연히 &lt;strong&gt;분노라는 도구에 의지할 필요가 없어진다&lt;/strong&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;불행을 무기로 상대방을 지배하려고 해. 자신이 얼마나 불행하고, 얼마나 괴로운지 알림으로써 주변 사람들 – 이를테면 가족이나 친구 – 을 걱정시키고, 그들의 말과 행동을 속박하고 지배하려 들지. 첫날 말했던, 집에 틀어박혀서 지내는 사람들은 곧잘 불행을 무기로 하는 우월감에 빠지네. 아들러가 “&lt;strong&gt;오늘날 연약함은 매우 강한 권력을 가진다&lt;/strong&gt;“라고 지적했을 정도야.&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;그러자 할머니께서 그 친구에게 이렇게 말씀하셨다고 하네. “&lt;strong&gt;네 얼굴을 주의 깊게 보는 사람은 너뿐이란다&lt;/strong&gt;.” 그날 이후로 그는 삶이 조금 편해졌다고 하더군.&lt;/p&gt; &lt;/blockquote&gt;</content><author><name>jaeyoon</name></author><category term="독서"/><summary type="html">### 읽게 된 계기 이 책을 읽게 된 계기는 우선 어머니가 추천해준 책들 중 한 권이었기 때문이다. 하지만 그 책들 중 내가 이 책을 가장 열심히 읽게 된 데는 또다른 이유가 있다. 책장을 몇 장 넘기지도 않았는데 다음과 같은 반가운 문장을 마주친 것이다. &gt; 청년</summary></entry><entry><title type="html">첫 인터뷰 Part 2: 인터뷰 내용</title><link href="http://blog.jaeyoon.io/2020/01/interview-2.html" rel="alternate" type="text/html" title="첫 인터뷰 Part 2: 인터뷰 내용"/><published>2020-01-08T22:11:20+00:00</published><updated>2020-01-08T22:11:20+00:00</updated><id>http://blog.jaeyoon.io/2020/01/interview-2</id><content type="html" xml:base="http://blog.jaeyoon.io/2020/01/interview-2.html">&lt;p&gt;인터뷰 내용 중 기억에 남는 부분을 여기 남긴다. 내가 한국어로 두뇌가 돌아가는 사람이라 뒤늦게 영어로 복기하는 데 애먹었다. 군데군데 표현이 어설플 수 있으니 이해 바란다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;A: Hi, Jaeyoon. I found your application very interesting. Am I pronouncing your name correctly?&lt;/strong&gt;&lt;br /&gt; 나: Yes, your pronunciation is perfect.&lt;br /&gt; A: Great, I am A. I study xx and publish at conferences like yy. I know that you didn’t mention my name in your SOP, and that’s totally fine. Even if you don’t get to work with me, I can make a reference to B you mentioned in the essay, or you getting co-advised by me and B is also a possibility.&lt;br /&gt; 나: I see. That is an answer to my first question, so thank you. My research interest is ~~, which I think has an overlap with your research area to some extent. It’s an honor to get this kind of opportunity.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;제일 많이 연습한 게 초반부에 말할 자기소개였는데, 초반부에는 내가 준비한 걸 말할 기회가 없을 정도로 A교수님이 먼저 말씀을 많이 하시며 긴장을 풀어주셨다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;A: Okay then, let’s start from the first question I gave you. Tell me your “why.” Why do you want to pursue a PhD?&lt;/strong&gt;&lt;br /&gt; 나: I guess it’s because doing HCI research aligns with my vision of the future. I believe increasingly more and more social challenges need to be addressed in groups, in teams, and in organizations. And we struggle to make this really work because we are not so great at working together to get things done. Particularly when the size of the team scales up. That’s where I see an opportunity for research. We can ask, how might computing help us overcome the kinds of heuristics and biases that might lead us astray and how we design our collaborations. Ultimately, I envision a world where computational systems orchestrate an organization with complex and open-ended goals from an online labor market. In fact, it’s already happening, considering mTurk as a workplace or collaboration on open source projects. With such a vision in mind, I aspire to become one of the many researchers who will shape the future of work and collaboration.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;A: What are your plans after getting a PhD?&lt;/strong&gt;&lt;br /&gt; 나: To be honest, I’m not sure. Because I think things are gonna change anyway. First of all, as I mentioned before, what I want to do right now is “research.” But since I don’t know how my thoughts are gonna change as I continue my PhD, I haven’t published a specific plan in the far future. Maybe I would end up in the industry, or I could be working at Adobe or Microsoft Research. Anyway, one thing I am certain about is the direction. I have pretty much confidence that I would be doing something related to my current research interests no matter what specific profession I end up with.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;A: What made you have such confidence? That is, why are you so certain about the relation between you and this field?&lt;/strong&gt;&lt;br /&gt; 나: You know, there is an expression “connect the dots.” I literally connected the dots, things that I have been interested in or been good at, and this led me to the field of HCI. For instance, many thoughts that I have gone through while working as a front-end engineer in a lot of web projects were related to HCI: my interests in web accessibility led me to do the SoundGlance project. Moreover, my assignment at a class I took as a freshman was related to open source software projects, and I realized that a similar topic was being studied in the field. After all this, I could not help but fall in love with HCI. Plus, I got more confidence as I did an intern at two labs.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;여기서부터는 &lt;strong&gt;내가 그간 해온 연구와 앞으로 하고 싶은 연구&lt;/strong&gt;에 대한 이야기가 오갔다. 대부분 특정 프로젝트나 domain-specific한 내용이라 생략&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;A: Okay, now that we have only 2 mins left, do you have any questions for me?&lt;/strong&gt;&lt;br /&gt; 나: Yes, I do have a lot of questions. First of all, I wonder what kind of working style or advising style you have.&lt;br /&gt; A: Well, good question. To be honest, I am closer to hands-off rather than hands-on. Not entirely hands-off, cuz I do hold weekly meetings with my students, and my office is right in front of the lab. But I wish my student to be independent while I only suggest a direction, not interfering in every way. 나: Great! I also think that making my own is more enjoyable and meaningful compared to being spoon-fed.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;이후 인사말 생략&lt;/p&gt; &lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/2020/01/interview-1.html&quot;&gt;첫 인터뷰 Part 1: 준비과정&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;첫 인터뷰 Part 2: 인터뷰 내용 (현재 글)&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="미국"/><category term="인터뷰"/><category term="PhD"/><summary type="html">인터뷰 내용 중 기억에 남는 부분을 여기 남긴다. 내가 한국어로 두뇌가 돌아가는 사람이라 뒤늦게 영어로 복기하는 데 애먹었다. 군데군데 표현이 어설플 수 있으니 이해 바란다. **A: Hi, Jaeyoon. I found your application very inte</summary></entry><entry><title type="html">첫 인터뷰 Part 1: 준비과정</title><link href="http://blog.jaeyoon.io/2020/01/interview-1.html" rel="alternate" type="text/html" title="첫 인터뷰 Part 1: 준비과정"/><published>2020-01-07T23:59:20+00:00</published><updated>2020-01-07T23:59:20+00:00</updated><id>http://blog.jaeyoon.io/2020/01/interview-1</id><content type="html" xml:base="http://blog.jaeyoon.io/2020/01/interview-1.html">&lt;h4 id=&quot;첫-인터뷰-전까지-준비한-것들&quot;&gt;첫 인터뷰 전까지 준비한 것들&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;[1] 예상 질문에 대한 답변 내용 준비&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;가장 먼저 한 일은 예상 질문을 모으는 일이었다. 스누라이프 유학게시판, 고우해커스, 스터디원들이 공유해준 자료, A교수님의 메일 등 가능한 모든 소스에서 총체적으로 긁어모았다. 모인 질문을 오픈 코딩으로 비슷한 것끼리 묶어 정리한 결과, 아래와 같이 크게 네 가지 카테고리로 분류되었다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Past&lt;/strong&gt;: 여태까지 해온 것에 대한 질문&lt;br /&gt;(e.g., 네 CV에 있는 xx 페이퍼가 흥미로운데 한 번 설명해봐라)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Future&lt;/strong&gt;: 앞으로 하고 싶은 것에 대한 질문&lt;br /&gt; (e.g., 왜 PhD를 하고 싶니? 어떤 연구 하고 싶니?)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Personal&lt;/strong&gt;: 연구 외적인 질문들&lt;br /&gt; (e.g., 자유시간에 뭐하니? 어떤 방식으로 협업하니?)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;: 분류가 애매한 질문들.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;각 카테고리마다 마크다운 파일을 하나씩 만들어 하위 질문들과 그에 대해 답변할 내용을 정리했다. 12월 중순부터는 인터뷰 스터디에 참여하며 말하는 연습도 함께 진행했다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;[2] 교수님 페이퍼 읽고 정리&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;1번에서 준비한 네 개의 파일은 지원한 모든 학교 인터뷰에 공통적으로 적용하였고, 이에 더하여 교수님-specific하게 준비한 내용을 담은 파일을 하나 더 준비했다. A교수님의 페이퍼 중 가장 citation 횟수가 높고 대표성 있어보이는 것 한 편, 내 관심사와 밀접 한 것을 두 편, 총 세 편을 선정하여 정독한 후 인터뷰 때 기회를 봐서 언급할 수 있도록 간단히 요약해놓았다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;[3] 인터뷰 환경조성&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;인터뷰 스터디원이 추천해준 &lt;a href=&quot;https://smartstore.naver.com/tabletmarket/products/4769161725?NaPm=ct%3Dk4z1io1c%7Cci%3D61d179284bd282cf5afbc5d7be6a70ab9e3b1540%7Ctr%3Dslsl%7Csn%3D321329%7Cic%3D%7Chk%3D1bfd64cd987e30b0eadb1c1d08ba05baa52e76a2&quot; target=&quot;_blank&quot;&gt;받침대&lt;/a&gt;를 이용해 노트북에 달린 캠 위치를 살짝 조정했다. 캠 옆에 붙인 포스트잇에는 A교수님의 풀 네임과 함께 “Smile”이라고 적혀있다. 인터뷰 스터디에서도 그렇고 평상시에도 무표정이 너무 무섭다는 지적을 종종 받기 때문이다. 화면 왼쪽에는 스카이프를, 오른쪽에는 1에서 준비한 파일들을 필요할 때마다 참고할 수 있도록 띄워두었다.&lt;/p&gt; &lt;figure&gt;&lt;img data-action=&quot;zoom&quot; src=&quot;/assets/img/200107/screen.jpg&quot; alt=&quot;인터뷰 환경&quot; /&gt;&lt;figcaption&gt;인터뷰 당시 나의 노트북 스크린&lt;/figcaption&gt;&lt;/figure&gt; &lt;h4 id=&quot;앞으로-더-준비할-것들&quot;&gt;앞으로 더 준비할 것들&lt;/h4&gt; &lt;p&gt;인터뷰는 1월 6일 스카이프를 통해 밤 11시반에 30분 정도 이루어졌다. A교수님이 있는 미국 시간으로는 오전 6시반이었다. 구체적인 내용은 &lt;a href=&quot;/2020/01/interview-2.html&quot;&gt;Part 2 포스팅&lt;/a&gt;에 작성했다.&lt;/p&gt; &lt;p&gt;첫 인터뷰를 스스로 평가하자면, 망친 것 같다. 낙천적으로 생각해도 잘 보지는 못했다. 가장 아쉬운 순간은 교수님이 본인이 하고 있는 프로젝트 설명하면서 예시로 어떤 카페 이야기를 하시던 중이었다. 나는 순간 이를 농담으로 이해하고 하하하하핳 크게 웃으며 열심히 리액션했는데 돌이켜 생각하니 농담이 아니라 매우 진지한 얘기였던 것 같다. 교수님이야 워낙 친절하셔서 내색을 안하셨지만, 외국인 느낌을 물씬 풍긴 순간이지 않았을까 싶다. 연구 핏도 중요하지만 4~6년 함께 일할 사람을 선발하는 과정이다보니 사람 대 사람으로 좋은 인상을 남기는 게 중요하다고 들었는데 그런 부분에서는 많이 모자랐던 것 같다.&lt;/p&gt; &lt;p&gt;답변 내용을 준비하는 데 치중해서 영어적인 부분을 그간 간과했는데, 훨씬 실전처럼 연습을 하면서 외국인 느낌 안들게 리액션하고 당황스러운 상황을 자연스럽게 넘길 방법을 익혀야겠다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;첫 인터뷰 Part 1: 준비과정 (현재 글)&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/2020/01/interview-2.html&quot;&gt;첫 인터뷰 Part 2: 인터뷰 내용&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="미국"/><category term="인터뷰"/><category term="PhD"/><summary type="html">#### 첫 인터뷰 전까지 준비한 것들 **[1] 예상 질문에 대한 답변 내용 준비** 가장 먼저 한 일은 예상 질문을 모으는 일이었다. 스누라이프 유학게시판, 고우해커스, 스터디원들이 공유해준 자료, A교수님의 메일 등 가능한 모든 소스에서 총체적으로 긁어모았다.</summary></entry><entry><title type="html">React에서 PropsType Validation하는 법 (v15.5+ 기준)</title><link href="http://blog.jaeyoon.io/2018/01/react-propstype.html" rel="alternate" type="text/html" title="React에서 PropsType Validation하는 법 (v15.5+ 기준)"/><published>2018-01-11T03:15:30+00:00</published><updated>2018-01-11T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2018/01/react-propstype</id><content type="html" xml:base="http://blog.jaeyoon.io/2018/01/react-propstype.html">&lt;h3 id=&quot;효과&quot;&gt;효과&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;컴포넌트 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;propTypes&lt;/code&gt; 객체를 설정&lt;/strong&gt;하면,&lt;/p&gt; &lt;ul&gt; &lt;li&gt;컴포넌트에서 원하는 props의 type &amp;amp; 전달된 props의 type 이 &lt;em&gt;일치하지 않을 때&lt;/em&gt;, 콘솔에서 오류 메시지가 나타나도록 할 수 있다.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isRequired&lt;/code&gt;로 필수 props를 지정할 수 있다. 즉 props를 &lt;em&gt;지정하지 않으면&lt;/em&gt; 콘솔에서 오류 메시지가 나타난다.&lt;/li&gt; &lt;/ul&gt; &lt;figure&gt; &lt;img data-action=&quot;zoom&quot; src=&quot;https://velopert.com/wp-content/uploads/2016/03/%EC%9D%B4%EB%AF%B8%EC%A7%80-3-1.png&quot; alt=&quot;콘솔의 오류 메시지 예시&quot; /&gt; &lt;figcaption&gt;콘솔의 오류 메시지 예시&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;설치&quot;&gt;설치&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;React v15.5부터는 PropTypes는 deprecated 되고 prop-types라는 다른 패키지로 이동되어, &lt;strong&gt;따로 설치&lt;/strong&gt;하지 않으면 에러가 난다. (참고: https://reactjs.org/docs/typechecking-with-proptypes.html)&lt;/p&gt; &lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;설치 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install —save prop-types&lt;/code&gt;&lt;/li&gt; &lt;li&gt;사용되는 컴포넌트마다 임포트해준다 &lt;code class=&quot;highlighter-rouge&quot;&gt;import PropTypes from 'prop-types';&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;사용&quot;&gt;사용&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;이전 버전의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;title: React.PropTypes.stinrg&lt;/code&gt; 처럼 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;를 붙여줘야 한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;PropTypes&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;에서 분리되기 이전이기 때문.&lt;/p&gt; &lt;/blockquote&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/components/Content.js&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;하지만 위처럼 일일이 작성하면 귀찮으니 아래 &lt;a href=&quot;https://reactjs.org/docs/typechecking-with-proptypes.html&quot;&gt;공식문서의 예시&lt;/a&gt;와 같이 Custom Validator 함수를 정의하는 것이 좋은 방법이다. Array 혹은 Object를 사용하는 버전도 있다.&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'prop-types'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 선언해둔다 (디폴트로 optional)&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A React element.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// an instance of a class. This uses JS's instanceof operator.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instanceOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ensure that your prop is limited to specific values by treating it as an enum.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'News'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Photos'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An object that could be one of many types&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalUnion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oneOfType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instanceOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An array of a certain type&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalArrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An object with property values of a certain type&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalObjectOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objectOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An object taking on a particular shape&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalObjectWithShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 위의 것들 중 어느 것이든 isRequired와 묶을 수 있다&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;requiredFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 묶지 않고 any data type이지만 isRequired 쓰고플 때&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;requiredAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Custom validator 함수 (기본)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// It should return an `Error` object if the validation fails. &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Don't `console.warn` or throw, as this won't work inside `oneOfType`.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;customProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/matchme/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid prop `'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'` supplied to'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' `'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'`. Validation failed.'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Custom validator 함수 (`arrayOf`, `objectOf` 사용 버전)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// It should return an `Error` object if the validation fails. &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The validator will be called for each key in the array or object. The first two arguments of the validator are the array or object itself, and the current item's key.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;customArrayProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/matchme/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid prop `'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propFullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'` supplied to'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' `'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'`. Validation failed.'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/&quot;&gt;React Documentation&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="react"/><summary type="html">### 효과 **컴포넌트 클래스의 `propTypes` 객체를 설정**하면, - 컴포넌트에서 원하는 props의 type &amp; 전달된 props의 type 이 *일치하지 않을 때*, 콘솔에서 오류 메시지가 나타나도록 할 수 있다. - `isRequired`로 필수 pr</summary></entry><entry><title type="html">React에서의 바인딩(Binding) 방법들 (v16+ 기준)</title><link href="http://blog.jaeyoon.io/2018/01/react-bind.html" rel="alternate" type="text/html" title="React에서의 바인딩(Binding) 방법들 (v16+ 기준)"/><published>2018-01-10T03:15:30+00:00</published><updated>2018-01-10T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2018/01/react-bind</id><content type="html" xml:base="http://blog.jaeyoon.io/2018/01/react-bind.html">&lt;blockquote&gt; &lt;p&gt;이 글은 현재 가장 최신인 16.2.0버전의 React를 기준으로 작성되었습니다.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&quot;왜-필요한가&quot;&gt;왜 필요한가?&lt;/h3&gt; &lt;p&gt;JavaScript에서 다음 두 코드는 동일하지 &lt;strong&gt;않다&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;결론부터 말하자면 두 번째 코드는 오류가 나게 된다. Binding은 두 번째 코드가 첫번째 코드와 똑같이 작동할 수 있도록 해준다.&lt;/p&gt; &lt;p&gt;React에서는 일반적으로 다른 컴포넌트로 pass할 메소드만 binding하면 된다. 예컨대 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;&lt;/code&gt;에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.handleClick&lt;/code&gt;을 pass하고 있으므로 binding이 필요하다. 반면 &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; 메소드 또는 &lt;a href=&quot;https://hackernoon.com/reactjs-component-lifecycle-methods-a-deep-dive-38275d9d13c0&quot;&gt;lifecycle 메소드&lt;/a&gt;에는 binding이 필요없다. 다른 컴포넌트로 pass되지 않으니깐.&lt;/p&gt; &lt;p&gt;JavaScript에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;에 대해 알아보려면 &lt;a href=&quot;http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/&quot;&gt;여기&lt;/a&gt;를 참고하라.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;어떻게-하는가&quot;&gt;어떻게 하는가?&lt;/h3&gt; &lt;p&gt;함수들이 컴포넌트 attributes 예컨대 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt;에 대한 액서스를 가지도록 하는 방법에는 여러 가지가 있다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor()&lt;/code&gt; 에서 바인딩&lt;/strong&gt; (ES2015) : &lt;code class=&quot;highlighter-rouge&quot;&gt;this.method.bind(this)&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Click happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;&lt;strong&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;에서 바인딩&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;this.method.bind(this)&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Click happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; 에서 Arrow Function으로 바인딩&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;() =&amp;gt; this.method()&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Click happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;&lt;strong&gt;4. Class Properties&lt;/strong&gt; (실험적) : &lt;code class=&quot;highlighter-rouge&quot;&gt;method = () =&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Click happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://blog.andrewray.me/react-es6-autobinding-and-createclass/&quot;&gt;Andrew Wray&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/faq-functions.html#why-is-binding-necessary-at-all&quot;&gt;React Documentation&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="react"/><summary type="html">&gt; 이 글은 현재 가장 최신인 16.2.0버전의 React를 기준으로 작성되었습니다. ### 왜 필요한가? JavaScript에서 다음 두 코드는 동일하지 **않다** ```jsx obj.method(); ``` ```jsx var method = obj.met</summary></entry><entry><title type="html">Jekyll Pagination 젬을 통해 무한 스크롤 만들기</title><link href="http://blog.jaeyoon.io/2018/01/jekyll-paginate.html" rel="alternate" type="text/html" title="Jekyll Pagination 젬을 통해 무한 스크롤 만들기"/><published>2018-01-04T03:15:30+00:00</published><updated>2018-01-04T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2018/01/jekyll-paginate</id><content type="html" xml:base="http://blog.jaeyoon.io/2018/01/jekyll-paginate.html">&lt;p&gt;&lt;strong&gt;jekyll-pagination-v2 젬을 이용하여 블로그를 페이징해보자&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Jekyll은 버전 2에서 버전 3으로 대대적인 업데이트를 했는데, 호환에 신경을 안 썼는지 기존 플러그인들 중 무용지물이 된 것이 수두룩하다. (Hexo가 인기를 끌고 있는 이유 중 하나이기도 하다.)&lt;/p&gt; &lt;p&gt;같은 이유로 &lt;a href=&quot;https://github.com/jekyll/jekyll-paginate&quot;&gt;jekyll-pagination 젬&lt;/a&gt;도 버전 3과 호환이 되기는 하지만 더이상 업데이트하지 않겠다고 선언하여 여러 가지 문제점이 많다. 레포지토리 description에 &lt;code class=&quot;highlighter-rouge&quot;&gt;NO LONGER UNDER ACTIVE DEVELOPMENT as of Jekyll 3: Pagination Generator for Jekyll&lt;/code&gt; 라고 써있고, 최근 이슈들에도 대부분 ‘이제 얜 버렸다’는 답변이 달려 있다.&lt;/p&gt; &lt;p&gt;더 이상 업데이트가 안 되는 대신, &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;jekyll-pagination-v2 젬&lt;/a&gt;이 새로이 나왔는데, 문제는 이 녀석이 &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;github-pages 젬&lt;/a&gt;과 호환이 안된다는 점이다. 그래서 &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt;를 적용해줘야 하는데, 여간 골치아픈 일이 아니었다. Hexo로 갈아탈까 몇 번이고 생각했지만 테마 직접 만들어야 성에 차는 내 성격상 새로 파는 일이 더 귀찮았다. 아무튼 이 글에서는 우선 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-pagination-v2&lt;/code&gt; 젬 및 infinite scroll 적용 방법을 알아보고, 다음 글에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;travis CI&lt;/code&gt;를 통해 디플로이 시키는 방법을 알아보도록 하겠다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1. 기본 페이지네이션&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;규정상 가장 흔한 비밀번호 조건은 영어소문자, 숫자 포함 8자 이상의 비밀번호.&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# GEMFILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate-v2&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# _config.yml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-paginate-v2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;per_page&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sort_reverse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 안 해주면 오래된 것부터 나옴&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;2. 카테고리 페이지네이션&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;여러 가지 구조로 만들 수 있지만, 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 디렉토리 하나에 포스팅 몰아 넣는 걸 좋아해서 이 방식대로 만들었다. 우선 &lt;code class=&quot;highlighter-rouge&quot;&gt;categories&lt;/code&gt;라는 폴더를 만들고, 그 안에 카테고리별로 페이지를 만들어둔다.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 디렉토리 구조&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ㄴ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;관심사&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ㄴ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;카테고리&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;해당 페이지 안에는 이렇게 작성해준다. 아래처럼 설정해두면 페이징된 경로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;카테고리명/번호&lt;/code&gt; 가 될 것이다.&lt;/p&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# categories/카테고리.md&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;관심사&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;IT/테크,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;실리콘밸리,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;추천&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;툴&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;등&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/관심사&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;관심사&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/:num/&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate-v2&lt;/code&gt;를 만든 sverrirs는 페이지네이터에게 혼란이 오지 않도록 아래처럼 url 양식 명시하는 것을 추천한다.&lt;/p&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# _config.yml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/:year/:month/:title.html&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;다 했으면 이제 기본 템플릿 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/home.html&lt;/code&gt; 에서 아마 &lt;code class=&quot;highlighter-rouge&quot;&gt;site.posts&lt;/code&gt; 였던 것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;paginator.posts&lt;/code&gt;로 바꿔준다. 그 아래에는 페이지네이터 네비게이션도 추가해주면 일단 완성이다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- _layouts/home.html --&amp;gt;&lt;/span&gt; {% for post in paginator.posts %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ post.url | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;{{ post.title | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; {% endfor %} {% if paginator.total_pages &amp;gt; 1 %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; {% if paginator.previous_page %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;previous&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ paginator.previous_page_path | prepend: site.baseurl | replace: '//', '/' }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;larr;&lt;/span&gt; 이전&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; {% endif %} {% if paginator.next_page %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ paginator.next_page_path | prepend: site.baseurl | replace: '//', '/' }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;다음 &lt;span class=&quot;ni&quot;&gt;&amp;amp;rarr;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; {% endif %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; {% endif %} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;2.1. v1과의 차이점&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;페이지네이션 v2 젬은 v1과 비교했을 때, 네비게이션을 1,2,3,4,5 형식으로 여러 숫자가 뜨도록 하고자 할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;trail&lt;/code&gt; 옵션을 통해 아주 간단하게 추가할 수 있어 훨씬 편리하다. 무엇보다도 &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2/blob/master/README-GENERATOR.md&quot;&gt;Readme.md&lt;/a&gt; 와 &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2/tree/master/examples&quot;&gt;examples&lt;/a&gt; 정리가 너무 잘 되어 있다. 또한 더 복잡한 카테고리/태그를 자동 생성할 수 있는 &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2/blob/master/README-AUTOPAGES.md&quot;&gt;autopages&lt;/a&gt;도 함께 딸려오는데 지킬 쓰다보면 자연스럽게 필요를 느끼는 아주아주 유용한 기능이니 참고하길 바란다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;3. 무한 스크롤 (Infinite Scroll)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;일단 무한 스크롤은 페이지네이션이 적용되어 있어야 사용 가능하다. 왜냐하면 ajax 처리할 &lt;em&gt;다음 페이지&lt;/em&gt; 가 어떻게든 존재해야하기 때문.&lt;/p&gt; &lt;p&gt;나는 핀트러스트로 유명한 &lt;a href=&quot;https://masonry.desandro.com/&quot;&gt;Masonry&lt;/a&gt; 레이아웃을 쓰고 있기 때문에, 같은 저자가 만든 &lt;a href=&quot;https://infinite-scroll.com/&quot;&gt;Infinite-scroll&lt;/a&gt; 플러그인을 활용했다. vanilla javascript 버전도 있고 jQuery 버전도 있다. 다음과 같은 js 코드를 추가해주면 간단히 적용 가능하다.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.pager'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;infScroll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InfiniteScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.next'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.grid-item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;outlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msnry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.page-load-status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hideNav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.pager'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollThreshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'document'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;물론 html도 상응해서 마크업을 해줘야 한다. 나같은 경우는 불러올 포스팅 하나하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;.grid-item&lt;/code&gt; 으로 마크업 되어 있고, 그걸 감싼 컨테이너를 &lt;code class=&quot;highlighter-rouge&quot;&gt;grid&lt;/code&gt;라는 변수로 넣어줬다. 나머지 클래스명들은 위 페이지네이션 네비게이션 마크업과 일치한다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4 id=&quot;ref&quot;&gt;Ref&lt;/h4&gt; &lt;p&gt;https://github.com/sverrirs/jekyll-paginate-v2/tree/master/examples&lt;br /&gt; https://infinite-scroll.com/api.html&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="jekyll"/><summary type="html">**jekyll-pagination-v2 젬을 이용하여 블로그를 페이징해보자** Jekyll은 버전 2에서 버전 3으로 대대적인 업데이트를 했는데, 호환에 신경을 안 썼는지 기존 플러그인들 중 무용지물이 된 것이 수두룩하다. (Hexo가 인기를 끌고 있는 이유 중 하나</summary></entry><entry><title type="html">Git 에러 CRLF will be replaced by LF (혹은 반대) 핸들링하는 방법</title><link href="http://blog.jaeyoon.io/2018/01/git-crlf.html" rel="alternate" type="text/html" title="Git 에러 CRLF will be replaced by LF (혹은 반대) 핸들링하는 방법"/><published>2018-01-03T03:15:30+00:00</published><updated>2018-01-03T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2018/01/git-crlf</id><content type="html" xml:base="http://blog.jaeyoon.io/2018/01/git-crlf.html">&lt;p&gt;&lt;strong&gt;맥/리눅스 이용 개발자와 윈도우 개발자가 협업할 때&lt;/strong&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;왜 발생할까?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; 명령어를 입력했는데 다음과 같은 에러가 뜨는 경우가 있다:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;warning: CRLF will be replaced by LF &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;some/file.file. The file will have its original line endings &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;your working directory. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;이는 맥 또는 리눅스를 쓰는 개발자와 윈도우 쓰는 개발자가 Git으로 협업할 때 발생하는 &lt;strong&gt;Whitespace&lt;/strong&gt; 에러다. 유닉스 시스템에서는 한 줄의 끝이 &lt;strong&gt;LF(Line Feed)&lt;/strong&gt;로 이루어지는 반면, 윈도우에서는 줄 하나가 &lt;strong&gt;CR(Carriage Return)&lt;/strong&gt;와 &lt;strong&gt;LF(Line Feed)&lt;/strong&gt;, 즉 &lt;strong&gt;CRLF&lt;/strong&gt;로 이루어지기 때문이다. 따라서 어느 한 쪽을 선택할지 Git에게 혼란이 온 것이다.&lt;/p&gt; &lt;p&gt;유닉스 OS을 쓰고 있다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;CRLF will be replaced by LF in…&lt;/code&gt; 에러 메시지가 뜰 것이고, 윈도우를 사용하고 있다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;LF will be replaced by CRLF in…&lt;/code&gt; 에러 메시지가 뜰 것이다.&lt;/p&gt; &lt;p&gt;둘 중 뭐든간에 해결 방법은 같다. Git은 똑똑해서 이를 자동 변환해주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;core.autocrlf&lt;/code&gt; 라는 기능을 가지고 있는데, 이 기능을 켜주기만 하면 된다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;해답은 &lt;code class=&quot;highlighter-rouge&quot;&gt;core.autocrlf&lt;/code&gt; 를 켜는 것!&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;이 기능은 개발자가 git에 코드를 추가했을 때 (예컨대 커밋할 때)에는 CRLF를 LF로 변환해주고, git의 코드를 개발자가 조회할 때 (예컨대 clone한다거나 할 때)에는 LF를 CRLF로 변환해준다.&lt;/p&gt; &lt;p&gt;그러므로 &lt;strong&gt;윈도우 사용자&lt;/strong&gt;의 경우 이러한 변환이 항상 실행되도록 다음과 같은 명령어를 입력한다. 물론 시스템 전체가 아닌 해당 프로젝트에만 적용하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;—global&lt;/code&gt; 을 빼주면 된다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;리눅스나 맥을 사용&lt;/strong&gt;하고 있는 경우, 조회할 때 LF를 CRLF를 변환하는 것은 원하지 않을 것이다. 따라서 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;이라는 명령어를 추가해줌으로써 단방향으로만 변환이 이루어지도록 설정한다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf &lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;input &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;혹은 이러한 변환 기능을 원하지 않고, 그냥 &lt;strong&gt;에러 메시지 끄고 알아서 작업하고 싶은 경우&lt;/strong&gt;에는 아래 명령어로 경고메시지 기능인 &lt;code class=&quot;highlighter-rouge&quot;&gt;core.safecrlf&lt;/code&gt;를 꺼주면 된다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.safecrlf &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4 id=&quot;ref&quot;&gt;Ref&lt;/h4&gt; &lt;p&gt;Git Documentation - &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#Formatting-and-Whitespace&quot;&gt;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#Formatting-and-Whitespace&lt;/a&gt;&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="Git"/><summary type="html">**맥/리눅스 이용 개발자와 윈도우 개발자가 협업할 때** &gt; 왜 발생할까? 터미널에 `git` 명령어를 입력했는데 다음과 같은 에러가 뜨는 경우가 있다: ```bash warning: CRLF will be replaced by LF in some/file</summary></entry><entry><title type="html">지킬(Jekyll) 포스팅에 이미지 첨부하는 방법 총체적 정리</title><link href="http://blog.jaeyoon.io/2017/12/jekyll-image.html" rel="alternate" type="text/html" title="지킬(Jekyll) 포스팅에 이미지 첨부하는 방법 총체적 정리"/><published>2017-12-30T03:15:30+00:00</published><updated>2017-12-30T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2017/12/jekyll-image</id><content type="html" xml:base="http://blog.jaeyoon.io/2017/12/jekyll-image.html">&lt;h4&gt;&lt;b&gt;경로 설정하기&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;지킬에서 Path를 찾아나갈 때에는 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;에서 정의된 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;이라는 변수가 사용된다. 이를 위해 아래 이미지에서 알 수 있듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;은 도메인 root path, &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;은 subpath를 말한다. 후자는 사이트가 도메인의 root가 아닌 subpath에 호스팅된 경우에 유용하게 사용된다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://byparker.com/img/what-is-a-baseurl.jpg&quot; alt=&quot;Jekyll의 이미지 Path&quot; /&gt;&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;//_config.yml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://blog.jaeyoon.io&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;my-baseurl&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;지킬은 기본적으로 YAML Front Matter을 가진 파일이 아니면 Liquid를 프로세싱하지 않는데, 이 YAML Front Matter은 기본적으로 아래 두 줄로 표시된다.&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;따라서 이 두 줄이 추가되지 않은 파일에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ site.baseurl }}&lt;/code&gt;과 같이 위에서 정의한 리퀴드 변수를 사용할 수 없다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4&gt;&lt;b&gt;이미지 첨부하기&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;1. HTML 문법으로&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Absolute URL (절대 경로) - &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;을 앞에 붙여준다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ &quot;/assets/img/image.png&quot; | relative_url }}'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'absolute'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- result : http://blog.jaeyoon.io/my-baseurl/assets/img/image.png --&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Relative URL (상대 경로) - &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;을 앞에 붙여준다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ &quot;/assets/img/image.png&quot; | relative_url }}'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relative'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- result : /my-baseurl/assets/img/image.png --&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;2. 마크다운(MD) 문법으로&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Jekyll이 사용하는 마크다운-HTML 컨버터인 &lt;code class=&quot;highlighter-rouge&quot;&gt;kramdown&lt;/code&gt; 하에서는 아래 네 가지 방식이 모두 허용된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{{site.url}}/assets/img/image.png&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;http://blog.jaeyoon.io/assets/img/image.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{{&quot;/assets/img/image.png&quot;|&lt;/span&gt; relative_url}}) &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/img/image.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;클래스명, alt값 등은 &lt;code class=&quot;highlighter-rouge&quot;&gt;{:property = &quot;value&quot;}&lt;/code&gt;형태로 붙여주면 된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/img/image.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{:class=&quot;img-responsive&quot;} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;3. SASS/SCSS 파일 안에서 이미지 불러오기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;YAML Front Matter 블록이 정의된 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.scss&lt;/code&gt; 파일에서 리퀴드 문법으로 사이트 URL 변수를 정의해준다.&lt;/p&gt; &lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// main.scss &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$baseurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{{ site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;그리고 임포트되는 기타 SCSS파일들에서는 이 변수를 사용하여 작업하면 된다.&lt;/p&gt; &lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// custom.scss &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$baseurl&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/img/image.png&quot;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;4. defaults 세팅으로 불러오기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;에서 마치 디폴트 레이아웃이 정의되어 있는 것처럼, 같은 방식으로 디폴트 이미지 경로를 지정해준다&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;assets/img&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;이에 따라 지킬이 생성할 사이트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/img&lt;/code&gt; 경로의 static한 이미지 파일들을 불러올 것이다. 즉 해당 경로의 이미지 파일들은 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;image: true&lt;/code&gt;라는 YML Front Matter를 가지게 되는 것이다. 이러한 설정을 하에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;background-image&lt;/code&gt;를 불러올 때에도 따로 변수를 생성할 필요없이 바로 경로를 적어줘도 된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ % assign image_files = site.static_files | where: &quot;image&quot;, true %} { % for myimage in image_files %} {{ myimage.path }} { % endfor %} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/img&lt;/code&gt;의 모든 파일이 출력되는 결과를 가져온다&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4&gt;&lt;b&gt;이미지 캡션 달기&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;1. HTML figure 태그&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;포스팅 MD 파일 안에 HTML 태그를 포함시켜도 상관 없기 때문에 귀찮은 방법이지만 일일이 figure 태그로 마크업하는 방법이 있다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ &quot;/assets/img/image.png&quot; | relative_url }}'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'absolute'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;여기에 캡션을 작성합니다.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;2. Custom CSS&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;스타일시트를 커스터마이즈하여 마크다운 문법으로 작성한 결과에 캡션 스타일을 먹이도록 할 수 있다. 예컨대 아래 코드에서는 img 태그 바로 뒤에 나오는 em 태그에만 캡션 스타일을 적용시킨다. em태그 말고도 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 로 사용하는 blockquote 태그, 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;{:.image-caption}&lt;/code&gt; 로 클래스를 정의해서 사용해도 된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{{&quot;/assets/img/image.png&quot;|&lt;/span&gt; relative_url}}) &lt;span class=&quot;ge&quot;&gt;*여기에 캡션을 작성합니다.*&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위 마크다운은 &lt;code class=&quot;highlighter-rouge&quot;&gt;kramdown&lt;/code&gt;에 의해 아래와 같은 HTML로 변환된다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://blog.jaeyoon.io/assets/img/image.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Image Alt 텍스트&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;em&amp;gt;&lt;/span&gt;여기에 캡션을 작성합니다.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;따라서 CSS는 아래와 같이 커스터마이징해주면 된다. 이 경우, em과 img 태그가 같은 p 태그를 부모로 가지도록 두 태그 사이에 빈 줄이 생기지 않도록 주의해야 한다.&lt;/p&gt; &lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;.8rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$grey-color-light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;3. 마크다운 Table&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;표를 이용해도 깔끔한 뷰를 만들 수 있다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{{&quot;/assets/img/image.png&quot;|&lt;/span&gt; relative_url}}) | |:--:| | 여기에 캡션을 작성합니다. | &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://dummyimage.com/600x300/ffd9e5/ffffff&amp;amp;text=like+this+yo&quot; alt=&quot;Image Alt 텍스트&quot; /&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align: center&quot;&gt;여기에 캡션을 작성합니다.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&lt;strong&gt;4. _includes에서 Partial View 만들기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Liquid가 제공하는 기능을 가장 full로 이용하는 방법인데, &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; 폴더에 새로운 html 조각 파일을 만들고, 이를 가져다가 사용하는 것이다. html 조각 파일에는 table 태그를 사용할 수도 있고, figure 태그로 마크업을 할 수도 있다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- _includes/image.html --&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ include.url }}'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ include.alt }}'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;{{ include.description }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;실제 포스팅을 작성하는 md 파일에서는 아래와 같이 사용하면 된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include image.html url='{{&quot;/assets/img/logo.png&quot;| relative_url}}' description='여기에 캡션을 작성합니다.' alt='Image Alt 텍스트' %} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4&gt;&lt;b&gt;Ref&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;jekyll 다큐멘테이션 - http://jekyllrb.com &lt;br /&gt; StackOverFlow - https://stackoverflow.com&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="블로그"/><category term="HTML"/><category term="Jekyll"/><category term="Markdown"/><summary type="html">경로 설정하기 지킬에서 Path를 찾아나갈 때에는 기본적으로 `_config.yml`에서 정의된 `url`과 `baseurl`이라는 변수가 사용된다. 이를 위해 아래 이미지에서 알 수 있듯이 `url`은 도메인 root path, `base</summary></entry><entry><title type="html">jQuery? Vanilla JS? 무엇이 답인가</title><link href="http://blog.jaeyoon.io/2017/12/jquery-free.html" rel="alternate" type="text/html" title="jQuery? Vanilla JS? 무엇이 답인가"/><published>2017-12-24T12:15:30+00:00</published><updated>2017-12-24T12:15:30+00:00</updated><id>http://blog.jaeyoon.io/2017/12/jquery-free</id><content type="html" xml:base="http://blog.jaeyoon.io/2017/12/jquery-free.html">&lt;p&gt;&lt;strong&gt;끊임없는 변화 속에서 중요한 것은 변하지 않는 것&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jQuery의 전성기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;2010년대 초반은 jQuery의 전성기였다. $는 간편했고, AJAX와 애니메이션을 심플하게 만들어 주었으며, 수많은 플러그인이 jQuery 기반으로 나왔다. 이러한 간편함과 플러그인 커뮤니티 덕분에 jQuery는 오랜 시간 큰 사랑을 받았다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;스마트폰의 대두&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;그러나 이제 많은 사람들이 jQuery Free를 외치고 있다. 이는 스마트폰의 시대가 열리면서 본격적이 되었다. 휴대폰에 탑재된 느리고 열등한 CPU와 적은 메모리, 그리고 작은 데이터 대역폭(bandwidth)은 jQuery를 사용하기에 적절하지 못한 환경이었기 때문이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;모듈화의 시대&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;한 마디로 jQuery는 너무 무겁다. jQuery의 내부적 요소들을 살펴보면, 불필요한 군살들이 너무 많다. 모듈화의 시대에서는 이제 jQuery의 부분부분을 조각내어 단일 목적의 lightweight 라이브러리들이 만들어지고 있다. 사용자의 3G/4G 데이터를 잡아먹지 않도록 말이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;JavaScript Revolution&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;또한 node.js의 영향도 크다. node.js의 등장과 함께 JS는 더이상 단지 ‘브라우저의 언어’라는 명목에서 벗어나 서버 사이드 언어로 발전했다. 이와 동시에 jQuery는 오로지 client-side에서 DOM을 조작하는 라이브러리라는 점에서 가치가 떨어진다. 이러한 것들은 서버사이드로 전이 가능한 것이 아니기 때문이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;새로운 프론트엔드 프레임워크/라이브러리&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;결정적으로 현재 React, Angular, Vue처럼 더 직관적이고 최신 기술의 프론트엔드 프레임워크/라이브러리가 등장하면서 jQuery의 인기는 절감되었다.&lt;/p&gt; &lt;p&gt;애니메이션의 경우, GSAP(GreenSock Animation Platform)이라는 애니메이션에만 집중한 라이브러리가 훨씬 더 빠른 성능을 자랑하고 있다. 아래는 GreenSock에서 직접 올린 각종 애니메이션 라이브러리 속도 비교 코드이다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;srfxA&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;GreenSock&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Speed Test: GSAP, CSS Transitions (Zepto), jQuery 3, anime, WAAPI&quot; class=&quot;codepen&quot;&gt;GSAP, Zepto, jQuery, Anime, WAAPI 속도 비교 &lt;a href=&quot;https://codepen.io/GreenSock/pen/srfxA/&quot;&gt;Speed Test: GSAP, CSS Transitions (Zepto), jQuery 3, anime, WAAPI&lt;/a&gt; by GreenSock (&lt;a href=&quot;https://codepen.io/GreenSock&quot;&gt;@GreenSock&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt; &lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vanilla JS&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;jQuery 플러그인들 중 종종 jQuery를 버리고 Vanilla JS 버전을 업데이트하는 경우가 있다. 새로운 라이브러리인가 생각할 수 있지만 &lt;a href=&quot;http://vanilla-js.com&quot;&gt;Vanilla-JS&lt;/a&gt; 웹사이트를 보면 알 수 있듯이 그냥 순수 JavaScript를 일컫는 말이다. Vanilla는 비격식으로 &lt;em&gt;평범한, 특별할 것 없는&lt;/em&gt; 이라는 뜻을 가진 형용사이다. 위 웹사이트에 가서 파일을 다운로드받으면, 0byte에 바로 코딩을 시작하라는 주석 뿐이다. JavaScript 코딩에 있어 프레임워크/라이브러리가 필요하다는 의견을 비꼬기 위해 만들어진 개그 사이트인 것이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jQuery를 쓰지 못하면 개발 생산성이 떨어지는가?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelector&lt;/code&gt; 쓴다고 효율성이 뚝 떨어지는 건 아니라고 본다. jQuery 선택자는 항상 jQuery Object(마치 array처럼 사용 가능)를 반환하는데 index를 매번 붙여주는 게 가끔은 불편한 경우도 있다. 또한 &lt;a href=&quot;http://youmightnotneedjquery.com/&quot;&gt;You might not need jQuery&lt;/a&gt;에서 볼 수 있듯이 AJAX를 JS로 직접 구현하는 등의 작업도 아주 복잡한 일은 아니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jQuery Free가 답인가?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;물론 랜딩페이지처럼 간단한 one page application에 있어서는 여전히 jQuery가 강자이다. 또 플러그인 생태계를 생각하면 jQuery Free란 굉장히 아쉬운 아이디어이다. 하지만 테크 업계는 빠르게 변화하고, 변화를 따라가기 위해서는 기존 툴을 버려야 할 때가 온다.&lt;/p&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;이 글은 jQuery를 비난하고, React나 Angular의 중요성을 옹호하고자 한 것이 아니다. 나의 결론은 개발자가 오로지 한 가지 언어와 프레임워크로만 개발을 지속하는 것은 거의 불가능에 가까운 일이므로, 무언가를 버릴 시점에선 버리고 배울 시점에선 배우자는 이야기이다. IT는 그 어느 업계보다 변화가 빠르기에, 경쟁력을 갖추기 위해 중요한 것은 빠르게 변화하는 ‘유행’ 프레임워크가 아니라, 변화에 빠르게 적응하는 감각과 실력을 갖추는 것이다.&lt;/p&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;얼마 전 구글의 UX 엔지니어 김종민 님께서 메일로 &lt;em&gt;UX 엔지니어는 단지 직종일 뿐, 모든 직종이 새로 만들어지고 사라지듯이 이 또한 지금의 유행에 따른 직종&lt;/em&gt; 이라고 말씀하셨던 게 생각난다. 실제로 김종민 님은 단 한 번도 ‘UX 엔지니어’가 되기 위해 공부한 적이 없다고 한다. 즉 중요한 것은 유행을 뒤쫓는 것이 아니라, 개발에 대한 이해나 디자인 감각처럼 &lt;strong&gt;변하지 않는 것을 익히는 것&lt;/strong&gt;이다. 변하지 않는 것을 파악하면, 다른 직종이 나오더라도 적응할 수 있기 때문이다. 세상에 잘하는 사람들은 참 많은데 그 사람들 중에서 내가 독보적인 사람이 되려면 어떤 부분에 흥미를 느끼고 자신이 있는지가 중요하다는 말씀이, 어찌보면 참 교과서적인 말로 들릴 수도 있지만, 김종민 님께서 살아온 삶에 너무 극명히 드러나있어 내 가치관과 진로관에 와닿는다. 그런 의미에서 나는 이 글에서 찾던 ‘답’을 jQuery Free가 아닌, &lt;em&gt;변하지 않는 것&lt;/em&gt; 이라고 정의내리고 싶다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="javascript"/><category term="jQuery"/><category term="vanillaJS"/><summary type="html">**끊임없는 변화 속에서 중요한 것은 변하지 않는 것** - **jQuery의 전성기** 2010년대 초반은 jQuery의 전성기였다. $는 간편했고, AJAX와 애니메이션을 심플하게 만들어 주었으며, 수많은 플러그인이 jQuery 기반으로 나왔다. 이러한 간편</summary></entry></feed>